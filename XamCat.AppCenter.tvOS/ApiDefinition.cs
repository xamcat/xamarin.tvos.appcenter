using System;
using CoreFoundation;
using Foundation;
using ObjCRuntime;
using Security;

namespace XamCat.AppCenter.tvOS
{

    // typedef NSString * (^MSLogMessageProvider)();
    delegate string MSLogMessageProvider();

    // typedef void (^MSLogHandler)(MSLogMessageProvider, MSLogLevel, NSString *, const char *, const char *, uint);
    //unsafe delegate void MSLogHandler(MSLogMessageProvider arg0, MSLogLevel arg1, string arg2, sbyte* arg3, sbyte* arg4, uint arg5);

    // @interface MSAppCenter : NSObject
    [BaseType(typeof(NSObject))]
    interface MSAppCenter
    {
        // +(instancetype)sharedInstance;
        [Static]
        [Export("sharedInstance")]
        MSAppCenter SharedInstance();

        // +(void)configureWithAppSecret:(NSString *)appSecret;
        [Static]
        [Export("configureWithAppSecret:")]
        void ConfigureWithAppSecret(string appSecret);

        // +(void)configure;
        [Static]
        [Export("configure")]
        void Configure();

        // +(void)start:(NSString *)appSecret withServices:(NSArray<Class> *)services;
        [Static]
        [Export("start:withServices:")]
        void Start(string appSecret, Class[] services);

        // +(void)startWithServices:(NSArray<Class> *)services;
        [Static]
        [Export("startWithServices:")]
        void StartWithServices(Class[] services);

        // +(void)startService:(Class)service;
        [Static]
        [Export("startService:")]
        void StartService(Class service);

        // +(void)startFromLibraryWithServices:(NSArray<Class> *)services;
        [Static]
        [Export("startFromLibraryWithServices:")]
        void StartFromLibraryWithServices(Class[] services);

        // +(BOOL)isConfigured;
        [Static]
        [Export("isConfigured")]
        //[Verify(MethodToProperty)]
        bool IsConfigured { get; }

        // +(BOOL)isRunningInAppCenterTestCloud;
        [Static]
        [Export("isRunningInAppCenterTestCloud")]
        //[Verify(MethodToProperty)]
        bool IsRunningInAppCenterTestCloud { get; }

        // +(void)setLogUrl:(NSString *)logUrl;
        [Static]
        [Export("setLogUrl:")]
        void SetLogUrl(string logUrl);

        // +(void)setEnabled:(BOOL)isEnabled;
        [Static]
        [Export("setEnabled:")]
        void SetEnabled(bool isEnabled);

        // +(BOOL)isEnabled;
        [Static]
        [Export("isEnabled")]
        //[Verify(MethodToProperty)]
        bool IsEnabled { get; }

        // +(MSLogLevel)logLevel;
        // +(void)setLogLevel:(MSLogLevel)logLevel;
        [Static]
        [Export("logLevel")]
        //[Verify(MethodToProperty)]
        MSLogLevel LogLevel { get; set; }

        // +(void)setLogHandler:(MSLogHandler)logHandler;
        //[Static]
        //[Export("setLogHandler:")]
        //void SetLogHandler(MSLogHandler logHandler);

        // +(void)setWrapperSdk:(MSWrapperSdk *)wrapperSdk;
        //[Static]
        //[Export("setWrapperSdk:")]
        //void SetWrapperSdk(MSWrapperSdk wrapperSdk);

        // +(BOOL)isAppDelegateForwarderEnabled;
        [Static]
        [Export("isAppDelegateForwarderEnabled")]
        bool IsAppDelegateForwarderEnabled();

        // +(NSUUID *)installId;
        //[Static]
        //[Export("installId")]
        //NSUUID InstallId();

        // +(BOOL)isDebuggerAttached;
        [Static]
        [Export("isDebuggerAttached")]
        bool IsDebuggerAttached();

        // +(NSString *)sdkVersion;
        [Static]
        [Export("sdkVersion")]
        string SdkVersion();

        // +(void)setMaxStorageSize:(long)sizeInBytes completionHandler:(void (^)(BOOL))completionHandler;
        [Static]
        [Export("setMaxStorageSize:completionHandler:")]
        void SetMaxStorageSize(nint sizeInBytes, Action<bool> completionHandler);

        // +(void)setUserId:(NSString *)userId;
        [Static]
        [Export("setUserId:")]
        void SetUserId(string userId);

        // +(void)setCountryCode:(NSString *)countryCode;
        [Static]
        [Export("setCountryCode:")]
        void SetCountryCode(string countryCode);
    }


    //AppCenterAnalytics
    // @interface MSAbstractLog : NSObject
    [BaseType(typeof(NSObject))]
    interface MSAbstractLog
    {
    }

    // typedef void (^MSAnalyticsAuthenticationProviderCompletionBlock)(NSString *, NSDate *);
    delegate void MSAnalyticsAuthenticationProviderCompletionBlock(string arg0, NSDate arg1);

    // @protocol MSAnalyticsAuthenticationProviderDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSAnalyticsAuthenticationProviderDelegate
    {
        // @required -(void)authenticationProvider:(MSAnalyticsAuthenticationProvider *)authenticationProvider acquireTokenWithCompletionHandler:(MSAnalyticsAuthenticationProviderCompletionBlock)completionHandler;
        [Abstract]
        [Export("authenticationProvider:acquireTokenWithCompletionHandler:")]
        void AcquireTokenWithCompletionHandler(MSAnalyticsAuthenticationProvider authenticationProvider, MSAnalyticsAuthenticationProviderCompletionBlock completionHandler);
    }

    // @interface MSAnalyticsAuthenticationProvider : NSObject
    [BaseType(typeof(NSObject))]
    interface MSAnalyticsAuthenticationProvider
    {
        // @property (readonly, assign, nonatomic) MSAnalyticsAuthenticationType type;
        [Export("type", ArgumentSemantic.Assign)]
        MSAnalyticsAuthenticationType Type { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull ticketKey;
        [Export("ticketKey")]
        string TicketKey { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull ticketKeyHash;
        [Export("ticketKeyHash")]
        string TicketKeyHash { get; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        MSAnalyticsAuthenticationProviderDelegate Delegate { get; }

        // @property (readonly, nonatomic, weak) id<MSAnalyticsAuthenticationProviderDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; }

        // -(instancetype _Nonnull)initWithAuthenticationType:(MSAnalyticsAuthenticationType)type ticketKey:(NSString * _Nonnull)ticketKey delegate:(id<MSAnalyticsAuthenticationProviderDelegate> _Nonnull)delegate;
        [Export("initWithAuthenticationType:ticketKey:delegate:")]
        IntPtr Constructor(MSAnalyticsAuthenticationType type, string ticketKey, MSAnalyticsAuthenticationProviderDelegate @delegate);

        // -(void)checkTokenExpiry;
        [Export("checkTokenExpiry")]
        void CheckTokenExpiry();
    }

    // @interface MSPropertyConfigurator : NSObject
    [BaseType(typeof(NSObject))]
    interface MSPropertyConfigurator
    {
        // -(void)setAppVersion:(NSString * _Nullable)appVersion;
        [Export("setAppVersion:")]
        void SetAppVersion([NullAllowed] string appVersion);

        // -(void)setAppName:(NSString * _Nullable)appName;
        [Export("setAppName:")]
        void SetAppName([NullAllowed] string appName);

        // -(void)setAppLocale:(NSString * _Nullable)appLocale;
        [Export("setAppLocale:")]
        void SetAppLocale([NullAllowed] string appLocale);

        // -(void)setUserId:(NSString * _Nullable)userId;
        [Export("setUserId:")]
        void SetUserId([NullAllowed] string userId);

        // -(void)setEventPropertyString:(NSString * _Nonnull)propertyValue forKey:(NSString * _Nonnull)propertyKey __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setEventPropertyString:forKey:")]
        void SetEventPropertyString(string propertyValue, string propertyKey);

        // -(void)setEventPropertyDouble:(double)propertyValue forKey:(NSString * _Nonnull)propertyKey __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setEventPropertyDouble:forKey:")]
        void SetEventPropertyDouble(double propertyValue, string propertyKey);

        // -(void)setEventPropertyInt64:(int64_t)propertyValue forKey:(NSString * _Nonnull)propertyKey __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setEventPropertyInt64:forKey:")]
        void SetEventPropertyInt64(long propertyValue, string propertyKey);

        // -(void)setEventPropertyBool:(BOOL)propertyValue forKey:(NSString * _Nonnull)propertyKey __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setEventPropertyBool:forKey:")]
        void SetEventPropertyBool(bool propertyValue, string propertyKey);

        // -(void)setEventPropertyDate:(NSDate * _Nonnull)propertyValue forKey:(NSString * _Nonnull)propertyKey __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setEventPropertyDate:forKey:")]
        void SetEventPropertyDate(NSDate propertyValue, string propertyKey);

        // -(void)removeEventPropertyForKey:(NSString * _Nonnull)propertyKey __attribute__((swift_name("removeEventProperty(forKey:)")));
        [Export("removeEventPropertyForKey:")]
        void RemoveEventPropertyForKey(string propertyKey);

        // -(void)collectDeviceId;
        [Export("collectDeviceId")]
        void CollectDeviceId();
    }

    // @interface MSAnalyticsTransmissionTarget : NSObject
    [BaseType(typeof(NSObject))]
    interface MSAnalyticsTransmissionTarget
    {
        // @property (readonly, nonatomic, strong) MSPropertyConfigurator * _Nonnull propertyConfigurator;
        [Export("propertyConfigurator", ArgumentSemantic.Strong)]
        MSPropertyConfigurator PropertyConfigurator { get; }

        // +(void)addAuthenticationProvider:(MSAnalyticsAuthenticationProvider * _Nonnull)authenticationProvider __attribute__((swift_name("addAuthenticationProvider(authenticationProvider:)")));
        [Static]
        [Export("addAuthenticationProvider:")]
        void AddAuthenticationProvider(MSAnalyticsAuthenticationProvider authenticationProvider);

        // -(void)trackEvent:(NSString * _Nonnull)eventName;
        [Export("trackEvent:")]
        void TrackEvent(string eventName);

        // -(void)trackEvent:(NSString * _Nonnull)eventName withProperties:(NSDictionary<NSString *,NSString *> * _Nullable)properties;
        [Export("trackEvent:withProperties:")]
        void TrackEvent(string eventName, [NullAllowed] NSDictionary<NSString, NSString> properties);

        // -(void)trackEvent:(NSString * _Nonnull)eventName withProperties:(NSDictionary<NSString *,NSString *> * _Nullable)properties flags:(MSFlags)flags;
        //[Export("trackEvent:withProperties:flags:")]
        //void TrackEvent(string eventName, [NullAllowed] NSDictionary<NSString, NSString> properties, MSFlags flags);

        // -(void)trackEvent:(NSString * _Nonnull)eventName withTypedProperties:(MSEventProperties * _Nullable)properties __attribute__((swift_name("trackEvent(_:withProperties:)")));
        [Export("trackEvent:withTypedProperties:")]
        void TrackEvent(string eventName, [NullAllowed] MSEventProperties properties);

        // -(void)trackEvent:(NSString * _Nonnull)eventName withTypedProperties:(MSEventProperties * _Nullable)properties flags:(MSFlags)flags __attribute__((swift_name("trackEvent(_:withProperties:flags:)")));
        //[Export("trackEvent:withTypedProperties:flags:")]
 

        // -(MSAnalyticsTransmissionTarget * _Nonnull)transmissionTargetForToken:(NSString * _Nonnull)token __attribute__((swift_name("transmissionTarget(forToken:)")));
        [Export("transmissionTargetForToken:")]
        MSAnalyticsTransmissionTarget TransmissionTargetForToken(string token);

        // -(void)setEnabled:(BOOL)isEnabled;
        [Export("setEnabled:")]
        void SetEnabled(bool isEnabled);

        // -(BOOL)isEnabled;
        [Export("isEnabled")]
        //[Verify(MethodToProperty)]
        bool IsEnabled { get; }

        // -(void)pause;
        [Export("pause")]
        void Pause();

        // -(void)resume;
        [Export("resume")]
        void Resume();
    }

    // @protocol MSService <NSObject>
    /*
      Check whether adding [Model] to this declaration is appropriate.
      [Model] is used to generate a C# class that implements this protocol,
      and might be useful for protocols that consumers are supposed to implement,
      since consumers can subclass the generated class instead of implementing
      the generated interface. If consumers are not supposed to implement this
      protocol, then [Model] is redundant and will generate code that will never
      be used.
    */
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface IMSService
    {
        // @required +(void)setEnabled:(BOOL)isEnabled;
        //[Static, Abstract]
        //[Export("setEnabled:")]
        //void SetEnabled(bool isEnabled);

        //// @required +(BOOL)isEnabled;
        //[Static, Abstract]
        //[Export("isEnabled")]
        ////[Verify(MethodToProperty)]
        //bool IsEnabled { get; }
    }

    // @interface MSServiceAbstract : NSObject <MSService>
    [BaseType(typeof(NSObject))]
    interface MSServiceAbstract : IMSService
    {
        // @property (assign, nonatomic) BOOL startedFromApplication;
        [Export("startedFromApplication")]
        bool StartedFromApplication { get; set; }

        // -(void)startWithChannelGroup:(id<MSChannelGroupProtocol>)channelGroup appSecret:(NSString *)appSecret transmissionTargetToken:(NSString *)token fromApplication:(BOOL)fromApplication;
        //[Export("startWithChannelGroup:appSecret:transmissionTargetToken:fromApplication:")]
        //void StartWithChannelGroup(MSChannelGroupProtocol channelGroup, string appSecret, string token, bool fromApplication);

        // -(void)updateConfigurationWithAppSecret:(NSString *)appSecret transmissionTargetToken:(NSString *)token;
        [Export("updateConfigurationWithAppSecret:transmissionTargetToken:")]
        void UpdateConfigurationWithAppSecret(string appSecret, string token);

        // -(BOOL)isAppSecretRequired;
        [Export("isAppSecretRequired")]
        //[Verify(MethodToProperty)]
        bool IsAppSecretRequired { get; }
    }

    // @interface MSAnalytics : MSServiceAbstract
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MSAnalytics : MSServiceAbstract
    {
        // +(void)trackEvent:(NSString * _Nonnull)eventName;
        [Static]
        [Export("trackEvent:")]
        void TrackEvent(string eventName);

        // +(void)trackEvent:(NSString * _Nonnull)eventName withProperties:(NSDictionary<NSString *,NSString *> * _Nullable)properties;
        [Static]
        [Export("trackEvent:withProperties:")]
        void TrackEvent(string eventName, [NullAllowed] NSDictionary<NSString, NSString> properties);

        // +(void)trackEvent:(NSString * _Nonnull)eventName withProperties:(NSDictionary<NSString *,NSString *> * _Nullable)properties flags:(MSFlags)flags;
        //[Static]
        //[Export("trackEvent:withProperties:flags:")]
        //void TrackEvent(string eventName, [NullAllowed] NSDictionary<NSString, NSString> properties, MSFlags flags);

        // +(void)trackEvent:(NSString * _Nonnull)eventName withTypedProperties:(MSEventProperties * _Nullable)properties __attribute__((swift_name("trackEvent(_:withProperties:)")));
        [Static]
        [Export("trackEvent:withTypedProperties:")]
        void TrackEvent(string eventName, [NullAllowed] MSEventProperties properties);

        // +(void)trackEvent:(NSString * _Nonnull)eventName withTypedProperties:(MSEventProperties * _Nullable)properties flags:(MSFlags)flags __attribute__((swift_name("trackEvent(_:withProperties:flags:)")));
        //[Static]
        //[Export("trackEvent:withTypedProperties:flags:")]
        //void TrackEvent(string eventName, [NullAllowed] MSEventProperties properties, MSFlags flags);

        // +(void)pause;
        [Static]
        [Export("pause")]
        void Pause();

        // +(void)resume;
        [Static]
        [Export("resume")]
        void Resume();

        // +(MSAnalyticsTransmissionTarget * _Nonnull)transmissionTargetForToken:(NSString * _Nonnull)token;
        [Static]
        [Export("transmissionTargetForToken:")]
        MSAnalyticsTransmissionTarget TransmissionTargetForToken(string token);

        // +(void)setTransmissionInterval:(NSUInteger)interval;
        [Static]
        [Export("setTransmissionInterval:")]
        void SetTransmissionInterval(nuint interval);
    }

    // @interface MSLogWithProperties : MSAbstractLog
    [BaseType(typeof(MSAbstractLog))]
    interface MSLogWithProperties
    {
        // @property (nonatomic, strong) NSDictionary<NSString *,NSString *> * properties;
        [Export("properties", ArgumentSemantic.Strong)]
        NSDictionary<NSString, NSString> Properties { get; set; }
    }

    // @interface MSLogWithNameAndProperties : MSLogWithProperties
    [BaseType(typeof(MSLogWithProperties))]
    interface MSLogWithNameAndProperties
    {
        // @property (copy, nonatomic) NSString * name;
        [Export("name")]
        string Name { get; set; }
    }

    // @interface MSEventLog : MSLogWithNameAndProperties
    [BaseType(typeof(MSLogWithNameAndProperties))]
    interface MSEventLog
    {
        // @property (copy, nonatomic) NSString * eventId;
        [Export("eventId")]
        string EventId { get; set; }

        // @property (nonatomic, strong) MSEventProperties * typedProperties;
        [Export("typedProperties", ArgumentSemantic.Strong)]
        MSEventProperties TypedProperties { get; set; }
    }

    // @interface MSEventProperties : NSObject
    [BaseType(typeof(NSObject))]
    interface MSEventProperties
    {
        // -(instancetype _Nonnull)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setString:forKey:")]
        MSEventProperties SetString(string value, string key);

        // -(instancetype _Nonnull)setDouble:(double)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setDouble:forKey:")]
        MSEventProperties SetDouble(double value, string key);

        // -(instancetype _Nonnull)setInt64:(int64_t)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setInt64:forKey:")]
        MSEventProperties SetInt64(long value, string key);

        // -(instancetype _Nonnull)setBool:(BOOL)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setBool:forKey:")]
        MSEventProperties SetBool(bool value, string key);

        // -(instancetype _Nonnull)setDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setEventProperty(_:forKey:)")));
        [Export("setDate:forKey:")]
        MSEventProperties SetDate(NSDate value, string key);
    }


    //APP CENTER CRASHES


    // @interface MSErrorReport : NSObject
    [BaseType(typeof(NSObject))]
    interface MSErrorReport
    {
        // @property (readonly, copy, nonatomic) NSString * incidentIdentifier;
        [Export("incidentIdentifier")]
        string IncidentIdentifier { get; }

        // @property (readonly, copy, nonatomic) NSString * reporterKey;
        [Export("reporterKey")]
        string ReporterKey { get; }

        // @property (readonly, copy, nonatomic) NSString * signal;
        [Export("signal")]
        string Signal { get; }

        // @property (readonly, copy, nonatomic) NSString * exceptionName;
        [Export("exceptionName")]
        string ExceptionName { get; }

        // @property (readonly, copy, nonatomic) NSString * exceptionReason;
        [Export("exceptionReason")]
        string ExceptionReason { get; }

        // @property (readonly, nonatomic, strong) NSDate * appStartTime;
        [Export("appStartTime", ArgumentSemantic.Strong)]
        NSDate AppStartTime { get; }

        // @property (readonly, nonatomic, strong) NSDate * appErrorTime;
        [Export("appErrorTime", ArgumentSemantic.Strong)]
        NSDate AppErrorTime { get; }

        // @property (readonly, nonatomic, strong) MSDevice * device;
        //[Export("device", ArgumentSemantic.Strong)]
        //MSDevice Device { get; }

        // @property (readonly, assign, nonatomic) NSUInteger appProcessIdentifier;
        [Export("appProcessIdentifier")]
        nuint AppProcessIdentifier { get; }

        // -(BOOL)isAppKill;
        [Export("isAppKill")]
        bool IsAppKill { get; }
    }

    // @protocol MSCrashesDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSCrashesDelegate
    {
        // @optional -(BOOL)crashes:(MSCrashes *)crashes shouldProcessErrorReport:(MSErrorReport *)errorReport;
        [Export("crashes:shouldProcessErrorReport:")]
        bool Crashes(MSCrashes crashes, MSErrorReport errorReport);

        //@optional -(void) crashes:(MSCrashes*) crashes willSendErrorReport:(MSErrorReport*) errorReport;
        [Export("crashes:willSendErrorReport:")]
        void CrasheswillSendErrorReport(MSCrashes crashes, MSErrorReport errorReport);

        //// @optional -(void)crashes:(MSCrashes *)crashes didSucceedSendingErrorReport:(MSErrorReport *)errorReport;
        [Export("crashes:didSucceedSendingErrorReport:")]
        void CrashesdidSucceedSendingErrorReport(MSCrashes crashes, MSErrorReport errorReport);

        // @optional -(void)crashes:(MSCrashes *)crashes didFailSendingErrorReport:(MSErrorReport *)errorReport withError:(NSError *)error;
        [Export("crashes:didFailSendingErrorReport:withError:")]
        void Crashes(MSCrashes crashes, MSErrorReport errorReport, NSError error);

        //// @optional -(NSArray<MSErrorAttachmentLog *> *)attachmentsWithCrashes:(MSCrashes *)crashes forErrorReport:(MSErrorReport *)errorReport;
        //[Export("attachmentsWithCrashes:forErrorReport:")]
        //MSErrorAttachmentLog[] AttachmentsWithCrashes(MSCrashes crashes, MSErrorReport errorReport);
    }

    // typedef BOOL (^MSUserConfirmationHandler)(NSArray<MSErrorReport *> * _Nonnull);
    delegate bool MSUserConfirmationHandler(MSErrorReport[] arg0);

    // @interface MSCrashes : MSServiceAbstract
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MSCrashes : MSServiceAbstract
    {
        // +(void)generateTestCrash;
        [Static]
        [Export("generateTestCrash")]
        void GenerateTestCrash();

        // +(BOOL)hasCrashedInLastSession;
        [Static]
        [Export("hasCrashedInLastSession")]
        //[Verify(MethodToProperty)]
        bool HasCrashedInLastSession { get; }

        // +(BOOL)hasReceivedMemoryWarningInLastSession;
        [Static]
        [Export("hasReceivedMemoryWarningInLastSession")]
        //[Verify(MethodToProperty)]
        bool HasReceivedMemoryWarningInLastSession { get; }

        // +(MSErrorReport * _Nullable)lastSessionCrashReport;
        [Static]
        [NullAllowed, Export("lastSessionCrashReport")]
        //[Verify(MethodToProperty)]
        MSErrorReport LastSessionCrashReport { get; }

        // +(void)setDelegate:(id<MSCrashesDelegate> _Nullable)delegate;
        [Static]
        [Export("setDelegate:")]
        void SetDelegate([NullAllowed] MSCrashesDelegate @delegate);

        // +(void)setUserConfirmationHandler:(MSUserConfirmationHandler _Nullable)userConfirmationHandler;
        [Static]
        [Export("setUserConfirmationHandler:")]
        void SetUserConfirmationHandler([NullAllowed] MSUserConfirmationHandler userConfirmationHandler);

        // +(void)notifyWithUserConfirmation:(MSUserConfirmation)userConfirmation;
        [Static]
        [Export("notifyWithUserConfirmation:")]
        void NotifyWithUserConfirmation(MSUserConfirmation userConfirmation);
    }
}
